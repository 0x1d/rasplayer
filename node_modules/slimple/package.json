{
  "author": {
    "name": "Patrick Balsiger",
    "email": "patrick.balsiger@allternative.ch",
    "url": "https://bitbucket.org/MentalExtract"
  },
  "dependencies": {
    "mime": "1.2.7",
    "wayjs": "0.4.0"
  },
  "keywords": [
    "web",
    "rest",
    "mongodb",
    "framework"
  ],
  "main": "index.js",
  "name": "slimple",
  "version": "0.6.0",
  "repository": {
    "url": "https://bitbucket.org/MentalExtract/slimple",
    "type": "git"
  },
  "description": "slim and simple service oriented nodejs framework",
  "devDependencies": {},
  "scripts": {
    "test": "test.js"
  },
  "license": "BSD",
  "_from": "slimple@0.6.0",
  "readme": "Slimple NodeJS Framework \n========================\nA slim and simple nodejs framework.  \n  \nThe idea of Slimple is to make it easy for you to write service oriented nodejs web applications.  \nIt is abandonning too much fancy shmancy modules and tries as much as possible to be pure JS.  \n  \nAt the first look, it might not be as simple as express for instance.  \nBut it provides you a coherent environment for writing apps.  \nIts core focus lies on a service oriented architecture and MongoDB support.  \nEverything you create will be loaded automatically to the Slimple application context (if you follow the convention). \n  \nThe official [website](http://slimple.eu01.aws.af.cm/) is still work in progress and not fully up-to-date.  \nIf the message \"In progres\" appears, just hit refresh.\n\n\n> Caution: There are breaking changes in version 0.5.0.  \n> The resource path to your services can now be defined with the folder structure.  \n> For example the resource /echo/:text will now be a folder /echo with the service in it. The resource defined in the service will be just :text  \n> Slimple automatically adds the folder structure to the resource path.\n\n## Installation\n```\n$ npm install slimple\n```\nAs it doesn't come with convenient building tools, following step has to be done manually to get your first Slimple app running:  \n  \n```\ncopy the content of  \n/node_modules/slimple/examples/skeleton   \nto your project root folder\n```\n\n### Mongoose Support  \nIf you want to add mongoose support to your project, perform following steps:  \n```\n$ npm install mongoose  \n```\n* add mongoose dependency to the package.json of your project  \n* open /config/db.js  \n* set property \"active\" to true  \n* set the connectionString to your db\n\n### Run the app  \nYou don't have to worry about the apps.js at the moment.  \nIf you're familiar with JS you know what you can do with it.  \n```\n$ node app\n```\n## Features\n\n* REST services\n* MongoDB support\n* Server side events\n* Simple HTTP server\n\n## Examples\nBy installing the skeleton app, you already get some examples of how to write services, mongoose schemas and events.  \nJust have a look at the corresponding folders, you will see that it is really easy.  \n\n### Services\nBy default, the services are located in the /services folder.  \nBy adding subfolders, you create the path to your REST service:\n\n```\n$ mkdir /services/echo  \n```\n\nNow create a file (the name doesn't matter) and add the basic service structure:\n```\nmodule.exports = {\n    resource: '(/:what)',\n    GET: function(ctx, data, http){\n        http.reply(data.what);\n    }\n};\n```  \nThis service will be available through this URL:\n/echo  \nYou can nest folders as much as you like, but keep in mind that each folder will be added to the resource path.  \nYou also create other methods like POST, DELETE or PUT.  \nAs you can see, the service method(s) need following parameters: \n\n* ctx - the application context where events and schemas are available  \n* data - the data passed to this service from the client  \n* http - request and response wrapper  \n\n\nhttp.reply is a convenient method to send back data to the client. It will be stringified automatically if it is a JSON object.\n\nThe resource defined here is a URL pattern which will be resolved by [WayJS](https://github.com/haggen/wayjs).  \nFor further informations about what URL patterns are possible, have a look at the WayJS documentation.  \n  \n#### Error handling\nIf you like to return some http errors, just throw an error object in your service:  \n```\nthrow { status: 500, message : new Error(\"that sucks\")};\n```\n#### Session handling\nAccessing session attributes within a service is quite simple:  \n```\nvar sessionId = http.session.uid();\nvar attribute = http.session.get('attribute');\nhttp.session.set('attribute', attribute);\n```\n### Mongoose  \nBecause Slimple uses the mongoose module, you can take a look at the [mongoose documentation](http://mongoosejs.com/docs/guide.html) about what is possible.  \nTo use mongoose schemas in Slimple, you can simply place your schema below the /schemas folder.  \n```\nmodule.exports = {\n    name: 'BlogPost',\n    schema: {\n        author  : { type: \"String\", required: true},\n        title   : { type: \"String\", required: true},\n        body    : { type: \"String\", required: true},\n        date    : { type: \"Date\", default: new Date() }\n    }\n};\n```\nIt's quite easy to use this schema in a service now:\n```\nvar model = ctx.db.model('BlogPost);\n```\nYou don't have to worry about creating the schema and connecting to the database, Slimple will do that for you.  \n\n### Events  \nSimilar thing for server side events.  \nJust put your event code below the /events folder.  \n```\nmodule.exports = {\n  name: 'echoEvent',\n  invoke: function(ctx, data){\n      ctx.log.trace(data);\n  }\n};\n```\nAnd fire the event (for example) in your service:  \n```\nctx.event.emit(\"echoEvent\", \"hello event\");\n```\n### Logging\nConvenient logging stuff is possible with\n```\nctx.log.trace(msg)\nctx.log.debug(msg)\nctx.log.info(msg)\nctx.log.error(msg)\nctx.log.fatal(msg)\n```\n### Application context\nDocumentation on this topic will follow soon.\n\n",
  "readmeFilename": "README.md",
  "_id": "slimple@0.6.0",
  "dist": {
    "shasum": "049e42db09d54ea76fd6514e889be8fa15683b79"
  },
  "_resolved": "https://registry.npmjs.org/slimple/-/slimple-0.6.0.tgz"
}
